//**** START SCENE ****

//set up the LCD
ldi	r16, 0b00111100 	;Set the LCD to 8 bit mode
out 	LCD_CMD, r16	;Write the command to the LCD
call	LCD_init		;Initialize the LCD

//write the "Start Game" text
ldi	r17, 0x80		;Set the cursor to the top left
out	LCD_CMD, r17	;Write the command to the LCD
ldi	r18, 0b01000000 ;Write the "S" character
out	LCD_DATA, r18	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r19, 0b01010001 ;Write the "t" character
out	LCD_DATA, r19	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r20, 0b01000100 ;Write the "a" character
out	LCD_DATA, r20	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r21, 0b01010100 ;Write the "r" character
out	LCD_DATA, r21	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r22, 0b01001000 ;Write the "t" character
out	LCD_DATA, r22	;Write to the LCD
call	delay_ms		;Wait for the character to display

//display the "Start" prompt
ldi	r23, 0xC0		;Set the cursor to the bottom left
out	LCD_CMD, r23	;Write the command to the LCD
ldi	r24, 0b00010000 ;Write the "S" character
out	LCD_DATA, r24	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r25, 0b00010001 ;Write the "t" character
out	LCD_DATA, r25	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r26, 0b00010010 ;Write the "a" character
out	LCD_DATA, r26	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r27, 0b00010100 ;Write the "r" character
out	LCD_DATA, r27	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r28, 0b00011000 ;Write the "t" character
out	LCD_DATA, r28	;Write to the LCD
call	delay_ms		;Wait for the character to display

//wait for the user to press the start button
ldi r29, 0b00000001	;Set the button as input
out DDRB, r29		;Set the button as input
ldi r30, 0b00000001	;Read the button state
in r30, PINB		;Read the button state
cpi r30, 0b00000001	;Check if button is pressed
brne start_game		;If pressed, jump to start game
rjmp start_scene	;Otherwise, loop back to start scene

//**** GAME SCENE ****
start_game:
//set up the LCD
ldi	r16, 0b00111100 	;Set the LCD to 8 bit mode
out 	LCD_CMD, r16	;Write the command to the LCD
call	LCD_init		;Initialize the LCD

//generate the bird and the obstacles
ldi	r17, 0x81		;Set the cursor to the top left
out	LCD_CMD, r17	;Write the command to the LCD
ldi	r18, 0b00100011 ;Write the bird character
out	LCD_DATA, r18	;Write the bird character
call	delay_ms		;Wait for the character to display

//generate the obstacle
ldi	r19, 0xC1		;Set the cursor to the bottom left
out	LCD_CMD, r19	;Write the command to the LCD
ldi	r20, 0b01110001 ;Write the obstacle character
out	LCD_DATA, r20	;Write the obstacle character
call	delay_ms		;Wait for the character to display

//move the bird and obstacles
mov	r21, 0x01		;Set the bird position
mov	r22, 0xC2		;Set the obstacle position

game_loop:
//check if user presses button to move the bird
ldi r23, 0b00000001	;Set the button as input
out DDRB, r23		;Set the button as input
ldi r24, 0b00000001	;Read the button state
in r24, PINB		;Read the button state
cpi r24, 0b00000001	;Check if button is pressed
brne move_bird		;If pressed, jump to move bird

//move the obstacles
mov	r25, r22		;Move the obstacle position
add	r25, 0x01		;Add one to the obstacle position
mov	r22, r25		;Store the updated obstacle position

//check if user presses button to move the bird
ldi r26, 0b00000001	;Set the button as input
out DDRB, r26		;Set the button as input
ldi r27, 0b00000001	;Read the button state
in r27, PINB		;Read the button state
cpi r27, 0b00000001	;Check if button is pressed
brne move_bird		;If pressed, jump to move bird

//check if obstacle and bird are in the same position
cp	r22, r21		;Compare the two positions
brne game_loop		;If different, jump back to game loop
rjmp game_over		;Otherwise, jump to game over

move_bird:
//move the bird
mov	r28, r21		;Move the bird position
sub	r28, 0x01		;Subtract one from the bird position
mov	r21, r28		;Store the updated bird position

//check if obstacle and bird are in the same position
cp	r22, r21		;Compare the two positions
brne game_loop		;If different, jump back to game loop
rjmp game_over		;Otherwise, jump to game over

//**** GAME OVER SCENE ****
game_over:
//clear the LCD
ldi	r16, 0b00000001 	;Clear the LCD
out 	LCD_CMD, r16	;Write the command to the LCD
call	delay_ms		;Wait for the LCD to clear

//write the "Game Over" text
ldi	r17, 0x80		;Set the cursor to the top left
out	LCD_CMD, r17	;Write the command to the LCD
ldi	r18, 0b01000100 ;Write the "G" character
out	LCD_DATA, r18	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r19, 0b01000001 ;Write the "a" character
out	LCD_DATA, r19	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r20, 0b01011011 ;Write the "m" character
out	LCD_DATA, r20	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r21, 0b01001110 ;Write the "e" character
out	LCD_DATA, r21	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r22, 0b00101000 ;Write the " " character
out	LCD_DATA, r22	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r23, 0b01010100 ;Write the "O" character
out	LCD_DATA, r23	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r24, 0b01011101 ;Write the "v" character
out	LCD_DATA, r24	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r25, 0b01011100 ;Write the "e" character
out	LCD_DATA, r25	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r26, 0b01011011 ;Write the "r" character
out	LCD_DATA, r26	;Write to the LCD
call	delay_ms		;Wait for the character to display

//display the "Restart" prompt
ldi	r27, 0xC0		;Set the cursor to the bottom left
out	LCD_CMD, r27	;Write the command to the LCD
ldi	r28, 0b00010000 ;Write the "R" character
out	LCD_DATA, r28	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r29, 0b00010001 ;Write the "e" character
out	LCD_DATA, r29	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r30, 0b00010010 ;Write the "s" character
out	LCD_DATA, r30	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r31, 0b00010011 ;Write the "t" character
out	LCD_DATA, r31	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r32, 0b00010100 ;Write the "a" character
out	LCD_DATA, r32	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r33, 0b00010101 ;Write the "r" character
out	LCD_DATA, r33	;Write to the LCD
call	delay_ms		;Wait for the character to display
ldi	r34, 0b00010110 ;Write the "t" character
out	LCD_DATA, r34	;Write to the LCD
call	delay_ms		;Wait for the character to display

//wait for the user to press the start button
ldi r35, 0b00000001	;Set the button as input
out DDRB, r35		;Set the button as input
ldi r36, 0b00000001	;Read the button state
in r36, PINB		;Read the button state
cpi r36, 0b00000001	;Check if button is pressed
brne start_game		;If pressed, jump to start game
rjmp game_over		;Otherwise, loop back to game over